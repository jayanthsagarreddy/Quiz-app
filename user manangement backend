const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const session = require('express-session');

const app = express();
app.use(express.json());
app.use(session({ secret: 'your_secret_key', resave: false, saveUninitialized: true }));

mongoose.connect('mongodb://localhost:27017/quizApp', { useNewUrlParser: true, useUnifiedTopology: true });

const userSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String,
    quizHistory: [{ quizId: String, score: Number, date: Date }],
});

const User = mongoose.model('User', userSchema);

// Registration endpoint
app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ username, email, password: hashedPassword });
    await newUser.save();
    res.status(201).send('User registered successfully');
});

// Login endpoint
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (user && await bcrypt.compare(password, user.password)) {
        req.session.userId = user._id;
        res.send('Login successful');
    } else {
        res.status(401).send('Invalid credentials');
    }
});

// Logout endpoint
app.post('/logout', (req, res) => {
    req.session.destroy();
    res.send('Logged out successfully');
});

// Save quiz results
app.post('/quiz/submit', async (req, res) => {
    const { score, quizId } = req.body;
    const userId = req.session.userId;
    if (userId) {
        await User.findByIdAndUpdate(userId, {
            $push: { quizHistory: { quizId, score, date: new Date() } }
        });
        res.send('Quiz results saved successfully');
    } else {
        res.status(401).send('User not logged in');
    }
});

// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
